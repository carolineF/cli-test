#!/usr/bin/env node

const program = require('commander')
const pkg = require('../package')
const chalk = require('chalk')
const download = require('download-git-repo');
const ora = require('ora');
const fs = require('fs');
const path = require('path');
const { prompt } = require('inquirer')
const spinner = ora('Loading undead unicorns');
const initial = require('../packages/commands/initial');
const gmodule = require('../packages/commands/module');
const build = require('../packages/commands/build');
const question = require('../packages/commands/question');
const analysis = require('../packages/lib/analysis')
const { addCustomer, findCustomer, updateCustomer, removeCustomer, listCustomers } = require('../index')
const questions = [
  {
    type: 'input',
    name: 'firstname',
    message: 'Customer First Name'
  },
  {
    type: 'input',
    name: 'lastname',
    message: 'Customer Last Name'
  },
  {
    type: 'input',
    name: 'phone',
    message: 'Customer Phone Number'
  },
  {
    type: 'input',
    name: 'email',
    message: 'Customer Email Address'
  }
]

let config = {};
if(fs.existsSync(path.resolve('cli.config.js'))) {
  config = require(path.resolve('cli.config.js'));
}

/**
 * version
 */
program
  .version(chalk.green(`${pkg.version}`))
  .command('init')
  .description('initialize your cli config')
  .action(initial)

program
  .command('new [module]')
  .description('generator a new module')
  .action(function(module) {
    gmodule(config, module);
  })

program
  .command('build [module]')
  .description('git build specify module and assets upload to CDN!')
  .action(function(module) {
    build(config, module)
  })

program
  .command('question')
  .description('analysis dist files size and percent')
  .action(function() {
    question()
  })

program
  .command('analysis')
  .description('analysis dist files size and percent')
  .action(function() {
    analysis(config.upload.config.srcDir);
  })

program
  .command('add')
  .alias('a')
  .description('Add a customer')
  .action(() => {
    prompt(questions).then(answers => addCustomer(answers))
  })

program
  .command('find <name>')
  .alias('f')
  .description('Find a customer')
  .action(name => findCustomer(name));

program
  .command('update <_id>')
  .alias('u')
  .description('Update a customer')
  .action((_id) => {
    prompt(questions).then(answers => {
      updateCustomer(_id, answers)
    })
  })

program
  .command('remove <_id>')
  .alias('r')
  .description('Remove a customer')
  .action(_id => removeCustomer(_id));

program
  .command('list')
  .alias('l')
  .description('List a customer')
  .action(() => listCustomers());
/**
*
*/
program
  .command('start')
  .description('开始打开项目')
  .action(() => {
    console.log('========')
  })

/**
* init 项目
*/
/**
program
  .command('init <template> <app-name>')
  .description('初始化项目')
  .option('-c, --clone', '使用git 克隆项目')
  .action((template, appName, cmd) => {
    spinner.start('开始下载');
    download('direct:https://github.com/study-demo/cli-demo.git', appName, { clone: true }, err => {
      if (err) {
        spinner.fail(chalk.green('下载失败 \n' + err));
        process.exit();
      }
      spinner.succeed(chalk.green(`下载成功`));
    });
  })
*/
program.parse(process.argv);
